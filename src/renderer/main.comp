#version 460

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform writeonly image2D img;

layout(set = 0, binding = 1) buffer RenderData {
    // position + rotation
    mat4 view_matrix;
    // width / height
    float aspect_ratio;
    // vertical field of view
    float fov;
} render_conf;

vec3 miss(vec3 ray) {
    vec3 norm = normalize(ray);
    float t = 0.5 * (norm.y + 1.0);
    return (1.0 - t) * vec3(1, 1, 1) + t * vec3(0.5, 0.7, 1.0);
}

bool hit_sphere(vec3 center, float radius, vec3 ray) {
    float a = dot(ray, ray);
    float b = 2.0 * dot(center, ray);
    float c = dot(center, center) - radius*radius;
    float discriminant = b*b - 4*a*c;
    return (discriminant > 0);
}

void main() {
    vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / vec2(imageSize(img));

    float height = 2 * tan(radians(render_conf.fov / 2));
    float width = render_conf.aspect_ratio * height;
    float focal_length = (width / 2) / tan(radians(render_conf.fov) / 2);

    vec3 ll_corner = vec3(-width, -height, 0) / 2 - vec3(0, 0, -focal_length);

    vec3 global_ray_direction = ll_corner + vec3(uv * vec2(width, height), 0);
    vec3 ray_direction = vec3(render_conf.view_matrix * vec4(global_ray_direction, 0));
    vec3 colour = miss(ray_direction);

    if (hit_sphere(vec3(0, 0, 1), 0.1, ray_direction))
        colour = vec3(1, 0, 0);

    imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(colour, 0));
}
