#version 460

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform image2DArray img;

layout(set = 0, binding = 1) buffer RenderData {
    // rotation
    mat4 view_matrix;
    // position
    vec3 origin;
    // width / height
    float aspect_ratio;
    // the close cutoff line for depth perception
    float near_plane;
    // the far cutoff line for depth perception
    float far_plane;
    // vertical field of view
    float fov;
} render_conf;

uint x = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y + gl_GlobalInvocationID.z;

// Bob Jenkins's One-At-A-Time
uint random() {
    x += (x << 10u);
    x ^= (x >>  6u);
    x += (x <<  3u);
    x ^= (x >> 11u);
    x += (x << 15u);
    return x;
}

float random_01() {
    uint rand = random();
    return (rand % 0xFF) / 255.;
}

struct RayResult {
    bool hit;
    vec3 colour;
    vec3 normal;
    bool front_face;
    float depth;
};

RayResult miss(vec3 ray, vec3 origin) {
    vec3 norm = normalize(ray);
    float t = 0.5 * (norm.y + 1.0);
    RayResult ret;
    ret.hit = false;
    ret.normal = vec3(0, 0, 0);
    ret.colour = (1.0 - t) * vec3(1, 1, 1) + t * vec3(0.5, 0.7, 1.0);
    return ret;
}

RayResult sphere(vec3 center, float radius, vec3 dir, vec3 origin) {
    vec3 oc = origin - center;
    float a = dir.x * dir.x 
            + dir.y * dir.y 
            + dir.z * dir.z;
    float half_b =  dot(oc, dir);
    float c = (oc.x * oc.x + oc.y * oc.y + oc.z * oc.z) - radius * radius;
    float discriminant = half_b * half_b - c * a;
    RayResult ret;
    ret.hit = discriminant > 0;

    if (discriminant < 0) {
        ret.normal = vec3(0, 0, 0);
        return ret;
    }

    float sqrtd = sqrt(discriminant);
    float root = (-half_b - sqrtd) / a;
    if (root < render_conf.near_plane || render_conf.far_plane < root) {
        root = (-half_b + sqrtd) / a;
        if (root < render_conf.near_plane || render_conf.far_plane < root) {
            ret.hit = false;
            return ret;
        }
    }

    float d = (-half_b - sqrtd) / a;
    ret.normal = normalize(oc + dir * d);
    ret.colour = 0.5 * (ret.normal + vec3(1, 1, 1));
    ret.depth = 1 - (d - render_conf.near_plane) / render_conf.far_plane;

    if (dot(dir, ret.normal) > 0.0) {
        ret.front_face = true;
    } else {
        ret.normal = -ret.normal;
        ret.front_face = false;
    }

    return ret;
}

RayResult trace(vec3 dir, vec3 origin) {
    RayResult ret = sphere(vec3(0., 0., 1), 0.1, dir, origin);
    if (ret.hit)
        return ret;
    else
        return miss(dir, origin);
}

void main() {
    vec2 uv = vec2(gl_GlobalInvocationID.xy) / (vec2(gl_NumWorkGroups.xy) - vec2(1));

    float height = 2 * tan(radians(render_conf.fov / 2));
    float width = render_conf.aspect_ratio * height;
    float focal_length = width / (2 * tan(radians(render_conf.fov / 2)));

    vec3 ll_corner = render_conf.origin - vec3(width, -height, 0) / 2 + vec3(0, 0, focal_length);

    vec2 AA_fuzz = vec2(random_01(), -random_01() * random_01() * 2);
    vec3 global_ray_direction = ll_corner + vec3((uv + 0.005 * AA_fuzz) * vec2(width, -height), 0);
    vec3 ray_direction = vec3(render_conf.view_matrix * vec4(global_ray_direction, 0));

    RayResult hit = trace(ray_direction, render_conf.origin);
    imageStore(img, ivec3(gl_GlobalInvocationID.xyz), vec4(hit.colour, hit.depth));

    // do AA merging
    barrier();
    if (gl_GlobalInvocationID.z == 0) {
        vec4 colour = vec4(0);
        for (uint i = 0; i < gl_NumWorkGroups.z; i++)
            colour += imageLoad(img, ivec3(gl_GlobalInvocationID.xy, i));
        imageStore(img, ivec3(gl_GlobalInvocationID.xy, 0), vec4(colour.xyz / gl_NumWorkGroups.z, 0));
    }
}
