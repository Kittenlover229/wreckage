#version 460

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform writeonly image2D img;

layout(set = 0, binding = 1) buffer RenderData {
    // rotation
    mat4 view_matrix;
    // position
    vec3 origin_offset;
    // width / height
    float aspect_ratio;
    // vertical field of view
    float fov;
} render_conf;

struct RayResult {
    bool hit;
    vec3 colour;
    vec3 normal;
};

RayResult miss(vec3 ray, vec3 origin) {
    vec3 norm = normalize(ray);
    float t = 0.5 * (norm.y + 1.0);
    RayResult ret;
    ret.hit = false;
    ret.normal = vec3(0, 0, 0);
    ret.colour = (1.0 - t) * vec3(1, 1, 1) + t * vec3(0.5, 0.7, 1.0);
    return ret;
}

RayResult sphere(vec3 center, float radius, vec3 dir, vec3 origin) {
    vec3 oc = origin - center;
    float a = dot(dir, dir);
    float b = 2.0 * dot(oc, dir);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b * b - 4 * a * c;
    RayResult ret;
    ret.hit = discriminant > 0;

    if (ret.hit) {
        float t = (-b - sqrt(discriminant)) / (2.0 * a);
        if (t > 0.0) {
            vec3 normal = normalize(oc + dir * t);
            ret.normal = normal;
            ret.colour = 0.5 * (normal + vec3(1));
        } else {
            ret.hit = false;
        }
    } 

    return ret;
}

RayResult trace(vec3 dir, vec3 origin) {
    RayResult ret = sphere(vec3(0., 0., 1), 0.1, dir, origin);
    if (ret.hit)
        return ret;
    else
        return miss(dir, origin);
}

void main() {
    vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5)) / vec2(imageSize(img));

    float height = 2 * tan(radians(render_conf.fov / 2));
    float width = render_conf.aspect_ratio * height;
    float focal_length = (width / 2) / tan(radians(render_conf.fov / 2));

    vec3 ll_corner = render_conf.origin_offset - vec3(width, -height, 0) / 2 + vec3(0, 0, focal_length);

    vec3 global_ray_direction = ll_corner + vec3(uv * vec2(width, -height), 0);
    vec3 ray_direction = vec3(render_conf.view_matrix * vec4(global_ray_direction, 0));

    RayResult hit = trace(ray_direction, render_conf.origin_offset);

    imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(hit.colour, 1));
}
